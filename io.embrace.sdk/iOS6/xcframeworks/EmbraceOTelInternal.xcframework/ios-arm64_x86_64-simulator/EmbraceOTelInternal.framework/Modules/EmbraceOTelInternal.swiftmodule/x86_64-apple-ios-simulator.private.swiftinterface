// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios17.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name EmbraceOTelInternal
// swift-module-flags-ignorable: -enable-bare-slash-regex
import EmbraceCommonInternal
import Foundation
import OpenTelemetryApi
import OpenTelemetrySdk
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc final public class EmbraceOTel : ObjectiveC.NSObject {
  public static func setup(spanProcessors: [any OpenTelemetrySdk.SpanProcessor])
  public static func setup(logSharedState: any EmbraceOTelInternal.EmbraceLogSharedState)
  final public func tracer(instrumentationName: Swift.String, instrumentationVersion: Swift.String? = nil) -> any OpenTelemetryApi.Tracer
  final public func recordSpan<T>(name: Swift.String, type: EmbraceCommonInternal.SpanType, attributes: [Swift.String : Swift.String] = [:], spanOperation: () -> T) -> T
  final public func buildSpan(name: Swift.String, type: EmbraceCommonInternal.SpanType, attributes: [Swift.String : Swift.String] = [:]) -> any OpenTelemetryApi.SpanBuilder
  final public func log(_ message: Swift.String, severity: EmbraceCommonInternal.LogSeverity, attributes: [Swift.String : Swift.String])
  final public func log(_ message: Swift.String, severity: EmbraceCommonInternal.LogSeverity, timestamp: Foundation.Date, attributes: [Swift.String : Swift.String])
  @objc override dynamic public init()
  @objc deinit
}
public protocol EmbraceOpenTelemetry : AnyObject {
  func buildSpan(name: Swift.String, type: EmbraceCommonInternal.SpanType, attributes: [Swift.String : Swift.String]) -> any OpenTelemetryApi.SpanBuilder
  func recordCompletedSpan(name: Swift.String, type: EmbraceCommonInternal.SpanType, parent: (any OpenTelemetryApi.Span)?, startTime: Foundation.Date, endTime: Foundation.Date, attributes: [Swift.String : Swift.String], events: [EmbraceOTelInternal.RecordingSpanEvent], errorCode: EmbraceOTelInternal.ErrorCode?)
  func add(events: [any EmbraceOTelInternal.SpanEvent])
  func add(event: any EmbraceOTelInternal.SpanEvent)
  func log(_ message: Swift.String, severity: EmbraceCommonInternal.LogSeverity, attributes: [Swift.String : Swift.String])
  func log(_ message: Swift.String, severity: EmbraceCommonInternal.LogSeverity, timestamp: Foundation.Date, attributes: [Swift.String : Swift.String])
}
public protocol EmbraceLoggerConfig : Swift.Equatable {
  var batchLifetimeInSeconds: Swift.Int { get }
  var maximumTimeBetweenLogsInSeconds: Swift.Int { get }
  var maximumMessageLength: Swift.Int { get }
  var maximumAttributes: Swift.Int { get }
  var logAmountLimit: Swift.Int { get }
}
public protocol EmbraceLoggerProvider : OpenTelemetryApi.LoggerProvider {
  func get() -> any OpenTelemetryApi.Logger
  func update(_ config: any EmbraceOTelInternal.EmbraceLoggerConfig)
}
public protocol EmbraceLogSharedState {
  var processors: [any OpenTelemetrySdk.LogRecordProcessor] { get }
  var config: any EmbraceOTelInternal.EmbraceLoggerConfig { get }
  var resourceProvider: any EmbraceOTelInternal.EmbraceResourceProvider { get }
  func update(_ config: any EmbraceOTelInternal.EmbraceLoggerConfig)
}
public typealias EmbraceLogRecordExporter = OpenTelemetrySdk.LogRecordExporter
public typealias ExportResult = OpenTelemetrySdk.ExportResult
public typealias EmbraceLogRecordProcessor = OpenTelemetrySdk.LogRecordProcessor
extension Swift.Array where Element == any OpenTelemetrySdk.LogRecordProcessor {
  public static func `default`(withExporters exporters: [any OpenTelemetrySdk.LogRecordExporter]) -> [any OpenTelemetrySdk.LogRecordProcessor]
}
public typealias ReadableLogRecord = OpenTelemetrySdk.ReadableLogRecord
extension OpenTelemetryApi.Severity {
  public func toLogSeverity() -> EmbraceCommonInternal.LogSeverity?
  public static func fromLogSeverity(_ logSeverity: EmbraceCommonInternal.LogSeverity) -> OpenTelemetryApi.Severity?
}
public typealias Resource = OpenTelemetrySdk.Resource
public typealias ResourceValue = EmbraceOTelInternal.AttributeValue
public protocol EmbraceResource {
  var key: Swift.String { get }
  var value: EmbraceOTelInternal.ResourceValue { get }
}
public protocol EmbraceResourceProvider {
  func getResources() -> [any EmbraceOTelInternal.EmbraceResource]
}
extension EmbraceOTelInternal.EmbraceResourceProvider {
  public func getResource() -> EmbraceOTelInternal.Resource
}
public enum ErrorCode {
  case failure
  case userAbandon
  case unknown
  public static func == (a: EmbraceOTelInternal.ErrorCode, b: EmbraceOTelInternal.ErrorCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension OpenTelemetryApi.Span {
  public func markAsKeySpan()
  public func markAsPrivate()
  public func end(errorCode: EmbraceOTelInternal.SpanErrorCode? = nil, time: Foundation.Date = Date())
  public func end(error: (any Swift.Error)?, errorCode: EmbraceOTelInternal.SpanErrorCode? = nil, time: Foundation.Date = Date())
}
extension OpenTelemetryApi.Span {
  public func add(events: [any EmbraceOTelInternal.SpanEvent])
}
extension OpenTelemetrySdk.SpanData {
  public var embType: EmbraceCommonInternal.SpanType {
    get
  }
  public func toJSON() throws -> Foundation.Data
}
public enum SpanErrorCode : Swift.String {
  case failure
  case userAbandon
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension OpenTelemetryApi.SpanBuilder {
  @discardableResult
  public func markAsPrivate() -> Self
  @discardableResult
  public func markAsKeySpan() -> Self
  @discardableResult
  public func error(errorCode: EmbraceOTelInternal.SpanErrorCode) -> Self
}
public typealias Tracer = OpenTelemetryApi.Tracer
public typealias TraceId = OpenTelemetryApi.TraceId
public typealias SpanId = OpenTelemetryApi.SpanId
public typealias SpanContext = OpenTelemetryApi.SpanContext
public typealias Span = OpenTelemetryApi.Span
public typealias SpanBuilder = OpenTelemetryApi.SpanBuilder
public typealias AttributeValue = OpenTelemetryApi.AttributeValue
public typealias SpanData = OpenTelemetrySdk.SpanData
public typealias ReadableSpan = OpenTelemetrySdk.ReadableSpan
public typealias SpanExporterResultCode = OpenTelemetrySdk.SpanExporterResultCode
public typealias SpanProcessor = OpenTelemetrySdk.SpanProcessor
public protocol EmbraceSpanExporter : OpenTelemetrySdk.SpanExporter {
}
public typealias BatchSpanProcessor = OpenTelemetrySdk.BatchSpanProcessor
public protocol EmbraceSpanProcessor : OpenTelemetrySdk.SpanProcessor {
}
public struct SingleSpanProcessor : EmbraceOTelInternal.EmbraceSpanProcessor {
  public init(spanExporter: any OpenTelemetrySdk.SpanExporter)
  public let isStartRequired: Swift.Bool
  public let isEndRequired: Swift.Bool
  public func onStart(parentContext: EmbraceOTelInternal.SpanContext?, span: any OpenTelemetrySdk.ReadableSpan)
  public func onEnd(span: any OpenTelemetrySdk.ReadableSpan)
  public func forceFlush(timeout: Foundation.TimeInterval?)
  public func shutdown()
}
public struct RecordingSpanEvent : EmbraceOTelInternal.SpanEvent, Swift.Codable, Swift.Equatable {
  public let name: Swift.String
  public let timestamp: Foundation.Date
  public let attributes: [Swift.String : EmbraceOTelInternal.AttributeValue]
  public init(name: Swift.String, timestamp: Foundation.Date, attributes: [Swift.String : EmbraceOTelInternal.AttributeValue] = [:])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public func == (lhs: EmbraceOTelInternal.RecordingSpanEvent, rhs: EmbraceOTelInternal.RecordingSpanEvent) -> Swift.Bool
public func == (lhs: [EmbraceOTelInternal.RecordingSpanEvent], rhs: [EmbraceOTelInternal.RecordingSpanEvent]) -> Swift.Bool
public struct RecordingSpanLink : Swift.Codable, Swift.Equatable {
  public let traceId: EmbraceOTelInternal.TraceId
  public let spanId: EmbraceOTelInternal.SpanId
  public let attributes: [Swift.String : EmbraceOTelInternal.AttributeValue]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public func == (lhs: EmbraceOTelInternal.RecordingSpanLink, rhs: EmbraceOTelInternal.RecordingSpanLink) -> Swift.Bool
public func == (lhs: [EmbraceOTelInternal.RecordingSpanLink], rhs: [EmbraceOTelInternal.RecordingSpanLink]) -> Swift.Bool
public protocol SpanEvent {
  var name: Swift.String { get }
  var timestamp: Foundation.Date { get }
  var attributes: [Swift.String : EmbraceOTelInternal.AttributeValue] { get }
}
extension OpenTelemetrySdk.SpanData.Event : EmbraceOTelInternal.SpanEvent {
}
public protocol SpanLink {
  var context: EmbraceOTelInternal.SpanContext { get }
  var attributes: [Swift.String : EmbraceOTelInternal.AttributeValue] { get }
}
extension OpenTelemetrySdk.SpanData.Link : EmbraceOTelInternal.SpanLink {
}
extension EmbraceOTelInternal.ErrorCode : Swift.Equatable {}
extension EmbraceOTelInternal.ErrorCode : Swift.Hashable {}
extension EmbraceOTelInternal.SpanErrorCode : Swift.Equatable {}
extension EmbraceOTelInternal.SpanErrorCode : Swift.Hashable {}
extension EmbraceOTelInternal.SpanErrorCode : Swift.RawRepresentable {}
