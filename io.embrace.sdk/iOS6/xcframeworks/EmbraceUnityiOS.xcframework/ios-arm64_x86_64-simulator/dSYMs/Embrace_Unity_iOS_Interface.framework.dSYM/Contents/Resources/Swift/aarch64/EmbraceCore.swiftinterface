// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios17.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name EmbraceCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import EmbraceCaptureService
import EmbraceCommonInternal
import EmbraceConfigInternal
import EmbraceOTelInternal
import EmbraceObjCUtilsInternal
import EmbraceSemantics
import EmbraceStorageInternal
import EmbraceUploadInternal
import Foundation
import Foundation/*.Data*/
import OpenTelemetryApi
import OpenTelemetrySdk
import Security
import Swift
import SwiftUI
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@_inheritsConvenienceInitializers @objc public class EmbraceCoreResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum CaptureServiceFactory {
}
extension EmbraceCore.URLSessionCaptureService {
  @_inheritsConvenienceInitializers @objc(EMBURLSessionCaptureServiceOptions) final public class Options : ObjectiveC.NSObject {
    @objc final public let injectTracingHeader: Swift.Bool
    @objc final public let requestsDataSource: (any EmbraceCore.URLSessionRequestsDataSource)?
    @objc public init(injectTracingHeader: Swift.Bool, requestsDataSource: (any EmbraceCore.URLSessionRequestsDataSource)?)
    @objc convenience override dynamic public init()
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(EMBURLSessionCaptureService) final public class URLSessionCaptureService : EmbraceCaptureService.CaptureService {
  final public let options: EmbraceCore.URLSessionCaptureService.Options
  @objc convenience public init(options: EmbraceCore.URLSessionCaptureService.Options)
  @objc convenience override dynamic public init()
  @objc override final public func onInstall()
  @objc deinit
}
@objc public protocol URLSessionRequestsDataSource : ObjectiveC.NSObjectProtocol {
  @objc func modifiedRequest(for request: Foundation.URLRequest) -> Foundation.URLRequest
}
extension EmbraceCore.PushNotificationCaptureService {
  @_inheritsConvenienceInitializers @objc(EMBPushNotificationCaptureServiceOptions) final public class Options : ObjectiveC.NSObject {
    @objc final public let captureData: Swift.Bool
    @objc public init(captureData: Swift.Bool)
    @objc convenience override dynamic public init()
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class PushNotificationCaptureService : EmbraceCaptureService.CaptureService {
  @objc final public let options: EmbraceCore.PushNotificationCaptureService.Options
  @objc convenience public init(options: EmbraceCore.PushNotificationCaptureService.Options)
  @objc convenience override dynamic public init()
  @objc override final public func onInstall()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(EMBLowMemoryWarningCaptureService) public class LowMemoryWarningCaptureService : EmbraceCaptureService.CaptureService {
  public var onWarningCaptured: (() -> Swift.Void)?
  @objc deinit
  @objc override public func onInstall()
  @objc override dynamic public init()
}
@objc(EMBLowPowerModeCaptureService) public class LowPowerModeCaptureService : EmbraceCaptureService.CaptureService {
  final public let provider: any EmbraceCore.PowerModeProvider
  public init(provider: any EmbraceCore.PowerModeProvider = DefaultPowerModeProvider())
  @objc deinit
  @objc override public func onInstall()
  @objc override public func onStart()
  @objc override public func onStop()
}
public protocol PowerModeProvider {
  var isLowPowerModeEnabled: Swift.Bool { get }
}
@_inheritsConvenienceInitializers @objc(EMBDefaultPowerModeProvider) public class DefaultPowerModeProvider : ObjectiveC.NSObject, EmbraceCore.PowerModeProvider {
  @objc public var isLowPowerModeEnabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension EmbraceCore.TapCaptureService {
  @_inheritsConvenienceInitializers @objc(EMBTapCaptureServiceOptions) final public class Options : ObjectiveC.NSObject {
    @objc final public let ignoredViewTypes: [Swift.AnyClass]
    @objc final public let captureTapCoordinates: Swift.Bool
    @objc final public let delegate: (any EmbraceCore.TapCaptureServiceDelegate)?
    @objc public init(ignoredViewTypes: [Swift.AnyClass] = [], captureTapCoordinates: Swift.Bool = true, delegate: (any EmbraceCore.TapCaptureServiceDelegate)? = nil)
    @objc convenience override dynamic public init()
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers @objc(EMBTapCaptureService) final public class TapCaptureService : EmbraceCaptureService.CaptureService {
  final public let options: EmbraceCore.TapCaptureService.Options
  @objc convenience public init(options: EmbraceCore.TapCaptureService.Options = TapCaptureService.Options())
  @objc override final public func onInstall()
  @objc deinit
}
@objc(EMBTapCaptureServiceDelegate) public protocol TapCaptureServiceDelegate : ObjectiveC.NSObjectProtocol {
  @objc func shouldCaptureTap(onView: UIKit.UIView) -> Swift.Bool
  @objc func shouldCaptureTapCoordinates(onView: UIKit.UIView) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(EMBViewCaptureService) final public class ViewCaptureService : EmbraceCaptureService.CaptureService {
  @objc override dynamic public init()
  @objc override final public func onInstall()
  @objc deinit
}
extension EmbraceCore.WebViewCaptureService {
  @_inheritsConvenienceInitializers @objc(EMBWebViewCaptureServiceOptions) final public class Options : ObjectiveC.NSObject {
    @objc final public let stripQueryParams: Swift.Bool
    @objc public init(stripQueryParams: Swift.Bool)
    @objc convenience override dynamic public init()
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(EMBWebViewCaptureService) final public class WebViewCaptureService : EmbraceCaptureService.CaptureService {
  @objc final public let options: EmbraceCore.WebViewCaptureService.Options
  @objc convenience public init(options: EmbraceCore.WebViewCaptureService.Options)
  @objc convenience override dynamic public init()
  @objc override final public func onInstall()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Embrace : ObjectiveC.NSObject {
  @objc public static var client: EmbraceCore.Embrace? {
    get
  }
  @objc public var options: EmbraceCore.Embrace.Options {
    get
  }
  @objc public var started: Swift.Bool {
    get
  }
  public var deviceId: EmbraceCommonInternal.DeviceIdentifier {
    get
  }
  @objc public var logLevel: EmbraceCommonInternal.LogLevel {
    @objc get
    @objc set
  }
  @objc public class var sdkVersion: Swift.String {
    @objc get
  }
  final public let metadata: EmbraceCore.MetadataHandler
  @discardableResult
  @objc public static func setup(options: EmbraceCore.Embrace.Options) throws -> EmbraceCore.Embrace
  @objc deinit
  @discardableResult
  @objc public func start() throws -> EmbraceCore.Embrace
  @objc public func currentSessionId() -> Swift.String?
  @objc public func currentDeviceId() -> Swift.String?
  @objc public func startNewSession()
  @objc public func endCurrentSession()
  @objc public func lastRunEndState() -> EmbraceCore.LastRunEndState
}
public enum EmbraceSetupError : Swift.Error, Swift.Equatable {
  case invalidAppId(_: Swift.String)
  case invalidAppGroupId(_: Swift.String)
  case invalidThread(_: Swift.String)
  case invalidOptions(_: Swift.String)
  case failedStorageCreation(_: Swift.String)
  case unableToInitialize(_: Swift.String)
  case initializationNotAllowed(_: Swift.String)
  public static func == (a: EmbraceCore.EmbraceSetupError, b: EmbraceCore.EmbraceSetupError) -> Swift.Bool
}
extension EmbraceCore.EmbraceSetupError : Foundation.LocalizedError, Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
}
public enum ExampleCrash : Swift.String, Swift.CaseIterable {
  case fatalError
  case unwrapOptional
  case indexOutOfBounds
  public init?(rawValue: Swift.String)
  public typealias AllCases = [EmbraceCore.ExampleCrash]
  public typealias RawValue = Swift.String
  public static var allCases: [EmbraceCore.ExampleCrash] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct EmbraceFileSystem {
}
public enum AppResourceKey : Swift.String, Swift.Codable {
  case bundleVersion
  case environment
  case detailedEnvironment
  case framework
  case launchCount
  case appVersion
  case buildID
  case sdkVersion
  case processIdentifier
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DeviceResourceKey : Swift.String, Swift.Codable {
  case isJailbroken
  case locale
  case timezone
  case totalDiskSpace
  case architecture
  case model
  case manufacturer
  case screenResolution
  case osVersion
  case osBuild
  case osType
  case osName
  case osVariant
  case osDescription
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension EmbraceCore.Embrace {
  @objc(EMBEndpoints) public class Endpoints : ObjectiveC.NSObject {
    @objc final public let baseURL: Swift.String
    @objc final public let developmentBaseURL: Swift.String
    @objc final public let configBaseURL: Swift.String
    @objc public init(baseURL: Swift.String, developmentBaseURL: Swift.String, configBaseURL: Swift.String)
    @objc deinit
  }
}
extension EmbraceCore.Embrace {
  @objc(EMBOptions) final public class Options : ObjectiveC.NSObject {
    @objc final public let appId: Swift.String
    @objc final public let appGroupId: Swift.String?
    @objc final public let platform: EmbraceCore.Platform
    @objc final public let endpoints: EmbraceCore.Embrace.Endpoints
    @objc final public let services: [EmbraceCaptureService.CaptureService]
    @objc final public let crashReporter: (any EmbraceCommonInternal.CrashReporter)?
    @objc final public let logLevel: EmbraceCommonInternal.LogLevel
    @objc final public let export: EmbraceCore.OpenTelemetryExport?
    @objc public init(appId: Swift.String, appGroupId: Swift.String? = nil, platform: EmbraceCore.Platform = .default, endpoints: EmbraceCore.Embrace.Endpoints? = nil, captureServices: [EmbraceCaptureService.CaptureService], crashReporter: (any EmbraceCommonInternal.CrashReporter)?, logLevel: EmbraceCommonInternal.LogLevel = .default, export: EmbraceCore.OpenTelemetryExport? = nil)
    @objc deinit
  }
}
@objc(EMBPlatform) public enum Platform : Swift.Int {
  case unity
  case reactNative
  case flutter
  case native
  public static let `default`: EmbraceCore.Platform
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension EmbraceCore.Embrace {
  public func crash(type: EmbraceCore.ExampleCrash = .fatalError) -> Swift.Never
}
extension EmbraceCore.Embrace : EmbraceOTelInternal.EmbraceOpenTelemetry {
  public func tracer(instrumentationName: Swift.String) -> any OpenTelemetryApi.Tracer
  public func buildSpan(name: Swift.String, type: EmbraceCommonInternal.SpanType = .performance, attributes: [Swift.String : Swift.String] = [:]) -> any OpenTelemetryApi.SpanBuilder
  public func recordCompletedSpan(name: Swift.String, type: EmbraceCommonInternal.SpanType, parent: (any OpenTelemetryApi.Span)?, startTime: Foundation.Date, endTime: Foundation.Date, attributes: [Swift.String : Swift.String], events: [EmbraceOTelInternal.RecordingSpanEvent], errorCode: EmbraceOTelInternal.ErrorCode?)
  public func add(events: [any EmbraceOTelInternal.SpanEvent])
  public func add(event: any EmbraceOTelInternal.SpanEvent)
  public func flush(_ span: any OpenTelemetryApi.Span)
  public func log(_ message: Swift.String, severity: EmbraceCommonInternal.LogSeverity, type: EmbraceCommonInternal.LogType = .message, attributes: [Swift.String : Swift.String] = [:])
  public func log(_ message: Swift.String, severity: EmbraceCommonInternal.LogSeverity, type: EmbraceCommonInternal.LogType = .message, timestamp: Foundation.Date, attributes: [Swift.String : Swift.String])
}
extension EmbraceCore.Embrace {
  public static func recordSpan<T>(name: Swift.String, parent: (any OpenTelemetryApi.Span)? = nil, type: EmbraceCommonInternal.SpanType = .performance, attributes: [Swift.String : Swift.String] = [:], block: ((any OpenTelemetryApi.Span)?) throws -> T) rethrows -> T
}
@_hasMissingDesignatedInitializers @objc(EMBBreadcrumb) public class Breadcrumb : ObjectiveC.NSObject, EmbraceOTelInternal.SpanEvent {
  final public let name: Swift.String
  final public let timestamp: Foundation.Date
  public var attributes: [Swift.String : EmbraceOTelInternal.AttributeValue] {
    get
  }
  @objc deinit
}
extension EmbraceOTelInternal.SpanEvent where Self == EmbraceCore.Breadcrumb {
  public static func breadcrumb(_ message: Swift.String, properties: [Swift.String : Swift.String] = [:]) -> any EmbraceOTelInternal.SpanEvent
}
@objc public enum LastRunEndState : Swift.Int {
  case unavailable
  case crash
  case cleanExit
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MetadataError : Swift.Error, Swift.Equatable {
  case invalidKey(_: Swift.String)
  case invalidSession(_: Swift.String)
  case limitReached(_: Swift.String)
  case invalidValue(_: Swift.String)
  public static func == (a: EmbraceCore.MetadataError, b: EmbraceCore.MetadataError) -> Swift.Bool
}
extension EmbraceCore.MetadataError : Foundation.LocalizedError, Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
}
extension EmbraceCore.MetadataHandler {
  public var currentPersonas: [EmbraceCore.PersonaTag] {
    get
  }
  public func add(persona: EmbraceCore.PersonaTag, lifespan: EmbraceCore.MetadataLifespan = .session) throws
  public func remove(persona: EmbraceCore.PersonaTag, lifespan: EmbraceCore.MetadataLifespan) throws
  public func removeAllPersonas(lifespans: [EmbraceCore.MetadataLifespan] = [.permanent, .process, .session]) throws
}
extension EmbraceCore.MetadataHandler {
  @objc dynamic public func add(persona: Swift.String, lifespan: EmbraceCore.MetadataLifespan = .session) throws
  @objc dynamic public func getCurrentPersonas() -> [Swift.String]
}
extension EmbraceCore.MetadataHandler {
  public var userName: Swift.String? {
    get
    set
  }
  public var userEmail: Swift.String? {
    get
    set
  }
  public var userIdentifier: Swift.String? {
    get
    set
  }
  @objc dynamic public func clearUserProperties()
}
@objc public enum MetadataLifespan : Swift.Int {
  case session
  case process
  case permanent
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(EMBMetadataHandler) public class MetadataHandler : ObjectiveC.NSObject {
  @objc public func addResource(key: Swift.String, value: Swift.String, lifespan: EmbraceCore.MetadataLifespan = .session) throws
  @objc public func addProperty(key: Swift.String, value: Swift.String, lifespan: EmbraceCore.MetadataLifespan = .session) throws
  @objc public func updateResource(key: Swift.String, value: Swift.String, lifespan: EmbraceCore.MetadataLifespan = .session) throws
  @objc public func updateProperty(key: Swift.String, value: Swift.String, lifespan: EmbraceCore.MetadataLifespan = .session) throws
  @objc public func removeResource(key: Swift.String, lifespan: EmbraceCore.MetadataLifespan = .session) throws
  @objc public func removeProperty(key: Swift.String, lifespan: EmbraceCore.MetadataLifespan = .session) throws
  public func removeAllResources(lifespans: [EmbraceCore.MetadataLifespan] = [.permanent, .process, .session]) throws
  public func removeAllProperties(lifespans: [EmbraceCore.MetadataLifespan]) throws
  @objc deinit
}
extension EmbraceCore.PersonaTag {
  public static let free: EmbraceCore.PersonaTag
  public static let preview: EmbraceCore.PersonaTag
  public static let subscriber: EmbraceCore.PersonaTag
  public static let payer: EmbraceCore.PersonaTag
  public static let guest: EmbraceCore.PersonaTag
  public static let pro: EmbraceCore.PersonaTag
  public static let mvp: EmbraceCore.PersonaTag
  public static let vip: EmbraceCore.PersonaTag
}
public struct PersonaTag : Swift.Equatable {
  public let rawValue: Swift.String
  public init(_ rawValue: Swift.String)
}
extension EmbraceCore.PersonaTag : Swift.RawRepresentable {
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
extension EmbraceCore.PersonaTag : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = EmbraceCore.PersonaTag.StringLiteralType
  public typealias UnicodeScalarLiteralType = EmbraceCore.PersonaTag.StringLiteralType
}
extension EmbraceCore.PersonaTag : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(EMBOpenTelemetryExport) public class OpenTelemetryExport : ObjectiveC.NSObject {
  final public let spanExporter: (any OpenTelemetrySdk.SpanExporter)?
  final public let logExporter: (any OpenTelemetrySdk.LogRecordExporter)?
  public init(spanExporter: (any OpenTelemetrySdk.SpanExporter)? = nil, logExporter: (any OpenTelemetrySdk.LogRecordExporter)? = nil)
  @objc deinit
}
public protocol EmbraceViewControllerCustomization {
  var nameForViewControllerInEmbrace: Swift.String? { get }
  var shouldCaptureViewInEmbrace: Swift.Bool { get }
}
extension EmbraceCore.EmbraceViewControllerCustomization where Self : UIKit.UIViewController {
  public var nameForViewControllerInEmbrace: Swift.String? {
    get
  }
  public var shouldCaptureViewInEmbrace: Swift.Bool {
    get
  }
}
public enum PushNotificationError : Swift.Error, Swift.Equatable {
  case invalidPayload(_: Swift.String)
  public static func == (a: EmbraceCore.PushNotificationError, b: EmbraceCore.PushNotificationError) -> Swift.Bool
}
extension EmbraceCore.PushNotificationError : Foundation.LocalizedError, Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(EMBPushNotificationEvent) public class PushNotificationEvent : ObjectiveC.NSObject, EmbraceOTelInternal.SpanEvent {
  final public let name: Swift.String
  final public let timestamp: Foundation.Date
  public var attributes: [Swift.String : EmbraceOTelInternal.AttributeValue] {
    get
  }
  @objc deinit
}
extension EmbraceOTelInternal.SpanEvent where Self == EmbraceCore.PushNotificationEvent {
  public static func push(notification: UserNotifications.UNNotification, properties: [Swift.String : Swift.String] = [:]) throws -> any EmbraceOTelInternal.SpanEvent
  public static func push(userInfo: [Swift.AnyHashable : Any], properties: [Swift.String : Swift.String] = [:]) throws -> any EmbraceOTelInternal.SpanEvent
}
extension Foundation.NSNotification.Name {
  public static let embraceSessionDidStart: Foundation.Notification.Name
  public static let embraceSessionWillEnd: Foundation.Notification.Name
}
extension EmbraceCore.W3C {
  public static let traceparentHeaderName: Swift.String
  public static func traceparent(from span: any OpenTelemetryApi.Span) -> Swift.String
  public static func traceparent(from context: EmbraceOTelInternal.SpanContext) -> Swift.String
  public static func traceparent(traceId: Swift.String, spanId: Swift.String, sampled: Swift.Bool = false) -> Swift.String
}
public struct W3C {
}
extension EmbraceCore.ExampleCrash : Swift.Equatable {}
extension EmbraceCore.ExampleCrash : Swift.Hashable {}
extension EmbraceCore.ExampleCrash : Swift.RawRepresentable {}
extension EmbraceCore.AppResourceKey : Swift.Equatable {}
extension EmbraceCore.AppResourceKey : Swift.Hashable {}
extension EmbraceCore.AppResourceKey : Swift.RawRepresentable {}
extension EmbraceCore.DeviceResourceKey : Swift.Equatable {}
extension EmbraceCore.DeviceResourceKey : Swift.Hashable {}
extension EmbraceCore.DeviceResourceKey : Swift.RawRepresentable {}
extension EmbraceCore.Platform : Swift.Equatable {}
extension EmbraceCore.Platform : Swift.Hashable {}
extension EmbraceCore.Platform : Swift.RawRepresentable {}
extension EmbraceCore.LastRunEndState : Swift.Equatable {}
extension EmbraceCore.LastRunEndState : Swift.Hashable {}
extension EmbraceCore.LastRunEndState : Swift.RawRepresentable {}
extension EmbraceCore.MetadataLifespan : Swift.Equatable {}
extension EmbraceCore.MetadataLifespan : Swift.Hashable {}
extension EmbraceCore.MetadataLifespan : Swift.RawRepresentable {}
