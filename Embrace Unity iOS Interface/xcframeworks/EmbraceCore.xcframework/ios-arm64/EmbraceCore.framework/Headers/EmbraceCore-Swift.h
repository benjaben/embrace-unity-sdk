#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef EMBRACECORE_SWIFT_H
#define EMBRACECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import EmbraceCaptureService;
@import EmbraceCommonInternal;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="EmbraceCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

/// Class used to represent a Breadcrum as a SpanEvent.
/// Usage example:
/// <code>Embrace.client?.add(.breadcrumb("This is a breadcrumb"))</code>
SWIFT_CLASS_NAMED("Breadcrumb")
@interface EMBBreadcrumb : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("DefaultPowerModeProvider")
@interface EMBDefaultPowerModeProvider : NSObject
@property (nonatomic, readonly) BOOL isLowPowerModeEnabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class EMBOptions;
@class NSString;
enum LastRunEndState : NSInteger;

/// Main class used to interact with the Embrace SDK.
/// To start the SDK you first need to configure it using an <code>Embrace.Options</code> instance passed in the <code>setup</code> static method.
/// Once the SDK is setup, you can start it by calling the <code>start</code> instance method.
/// <em>Please note that even if you setup the SDK, an Embrace session will not begin until <code>start</code> is called. This means data may not be correctly attached to that session.</em>
/// Example:
/// \code
/// import EmbraceIO
///
/// let options = Embrace.Options(appId: "appId", platform: .iOS)
/// try Embrace.setup(options: options)
/// try Embrace.client?.start()
///
/// \endcode
SWIFT_CLASS("_TtC11EmbraceCore7Embrace")
@interface Embrace : NSObject
/// Returns the current <code>Embrace</code> client.
/// This will be <code>nil</code> until the <code>setup</code> method is called, or if the setup process fails.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Embrace * _Nullable client;)
+ (Embrace * _Nullable)client SWIFT_WARN_UNUSED_RESULT;
/// The <code>Embrace.Options</code> that were used to configure the SDK.
@property (nonatomic, readonly, strong) EMBOptions * _Nonnull options;
/// Returns whether the SDK was started.
@property (nonatomic, readonly) BOOL started;
/// Used to control the verbosity level of the Embrace SDK console logs.
@property (nonatomic) enum LogLevel logLevel;
/// Returns the version of the Embrace SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Method used to configure the Embrace SDK.
/// note:
/// This method won’t do anything if the Embrace SDK was already setup.
/// \param options <code>Embrace.Options</code> to be used by the SDK.
///
///
/// throws:
/// <code>EmbraceSetupError.invalidOptions</code> when providing more than one <code>CrashReporter</code>.
///
/// returns:
/// The <code>Embrace</code> client instance.
+ (Embrace * _Nullable)setupWithOptions:(EMBOptions * _Nonnull)options error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Method used to start the Embrace SDK.
/// note:
/// This method won’t do anything if the Embrace SDK was already started or if it was disabled via the remote configurations.
///
/// throws:
/// <code>EmbraceSetupError.invalidThread</code> if not called from the main thread.
///
/// returns:
/// The <code>Embrace</code> client instance.
- (Embrace * _Nullable)startAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Returns the current session identifier, if any.
- (NSString * _Nullable)currentSessionId SWIFT_WARN_UNUSED_RESULT;
/// Returns the current device identifier.
- (NSString * _Nullable)currentDeviceId SWIFT_WARN_UNUSED_RESULT;
/// Forces the Embrace SDK to start a new session.
/// note:
/// If there was a session running, it will be ended before starting a new one.
- (void)startNewSession;
/// Force the Embrace SDK to stop the current session, if any.
- (void)endCurrentSession;
/// Returns the last run end state.
- (enum LastRunEndState)lastRunEndState SWIFT_WARN_UNUSED_RESULT;
@end




@interface Embrace (SWIFT_EXTENSION(EmbraceCore))
@end

enum EMBPlatform : NSInteger;
@class EMBEndpoints;
@class EMBCaptureService;
@protocol CrashReporter;
@class EMBOpenTelemetryExport;

/// Class used to setup the Embrace SDK.
SWIFT_CLASS_NAMED("Options")
@interface EMBOptions : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
@property (nonatomic, readonly, copy) NSString * _Nullable appGroupId;
@property (nonatomic, readonly) enum EMBPlatform platform;
@property (nonatomic, readonly, strong) EMBEndpoints * _Nonnull endpoints;
@property (nonatomic, readonly, copy) NSArray<EMBCaptureService *> * _Nonnull services;
@property (nonatomic, readonly, strong) id <CrashReporter> _Nullable crashReporter;
@property (nonatomic, readonly) enum LogLevel logLevel;
@property (nonatomic, readonly, strong, getter=export) EMBOpenTelemetryExport * _Nullable export_;
/// Default initializer for <code>Embrace.Options</code> that requires an array of <code>CaptureServices</code> to be passed.
/// If you wish to use the default <code>CaptureServices</code>, please refer to the <code>Embrace.Options</code>
/// initializer found in the <code>EmbraceIO</code> target.
/// \param appId The <code>appId</code> of the project.
///
/// \param appGroupId The app group identifier used by the app, if any.
///
/// \param platform <code>Platform</code> in which the app will run. Defaults to <code>.iOS</code>.
///
/// \param endpoints <code>Embrace.Endpoints</code> instance.
///
/// \param captureServices The <code>CaptureServices</code> to be installed.
///
/// \param crashReporter The <code>CrashReporter</code> to be installed.
///
/// \param logLevel The <code>LogLevel</code> to use for console logs.
///
/// \param export <code>OpenTelemetryExport</code> object to export telemetry outside of the Embrace backend.
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId appGroupId:(NSString * _Nullable)appGroupId platform:(enum EMBPlatform)platform endpoints:(EMBEndpoints * _Nullable)endpoints captureServices:(NSArray<EMBCaptureService *> * _Nonnull)captureServices crashReporter:(id <CrashReporter> _Nullable)crashReporter logLevel:(enum LogLevel)logLevel export:(EMBOpenTelemetryExport * _Nullable)export_ OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Embrace (SWIFT_EXTENSION(EmbraceCore))
@end


/// Class used to configure the endpoints <code>Embrace</code> will use to upload data and fetch the remote configurations.
SWIFT_CLASS_NAMED("Endpoints")
@interface EMBEndpoints : NSObject
/// The base URL to upload session data
@property (nonatomic, readonly, copy) NSString * _Nonnull baseURL;
/// The base URL to upload session data while a debugger is attached
@property (nonatomic, readonly, copy) NSString * _Nonnull developmentBaseURL;
/// The base URL to retrieve remote config
@property (nonatomic, readonly, copy) NSString * _Nonnull configBaseURL;
/// Initializer that allows for custom endpoints.
/// note:
/// If you wish to use the default endpoints please refer to the convenience initializer: <code>init(appId: String)</code>.
/// \param baseURL Endpoint for session data upload
///
/// \param developmentBaseURL Endpoint for session data upload while debugging
///
/// \param configBaseURL Endpoint to fetch the remote config
///
- (nonnull instancetype)initWithBaseURL:(NSString * _Nonnull)baseURL developmentBaseURL:(NSString * _Nonnull)developmentBaseURL configBaseURL:(NSString * _Nonnull)configBaseURL OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






@class NSBundle;

SWIFT_CLASS("_TtC11EmbraceCore20EmbraceCoreResources")
@interface EmbraceCoreResources : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Used to determine the end state of the previous app run.
typedef SWIFT_ENUM(NSInteger, LastRunEndState, open) {
/// Last end state can’t be determined
  LastRunEndStateUnavailable = 0,
/// Last app run ended in a crash
  LastRunEndStateCrash = 1,
/// Last app run ended cleanly
  LastRunEndStateCleanExit = 2,
};


/// Service that generates OpenTelemetry span events when the application receives a low memory warning.
SWIFT_RESILIENT_CLASS_NAMED("LowMemoryWarningCaptureService")
@interface EMBLowMemoryWarningCaptureService : EMBCaptureService
- (void)onInstall;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Service that generates OpenTelemetry spans when the phone is running in low power mode.
SWIFT_RESILIENT_CLASS_NAMED("LowPowerModeCaptureService")
@interface EMBLowPowerModeCaptureService : EMBCaptureService
- (void)onInstall;
- (void)onStart;
- (void)onStop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MetadataLifespan : NSInteger;

/// Class used to generate resources, properties and persona tags to be included in sessions and logs.
SWIFT_CLASS_NAMED("MetadataHandler")
@interface EMBMetadataHandler : NSObject
/// Adds a resource with the given key, value and lifespan.
/// If there are 2 resources with the same key but different lifespans, the one with a shorter lifespan will be used.
/// \param key The key of the resource to add. Can not be longer than 128 characters.
///
/// \param value The value of the resource to add. Will be truncated if its longer than 1024 characters.
///
/// \param lifespan The lifespan of the resource to add.
///
///
/// throws:
/// <code>MetadataError.limitReached</code> if the limit of resources was reached.
- (BOOL)addResourceWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value lifespan:(enum MetadataLifespan)lifespan error:(NSError * _Nullable * _Nullable)error;
/// Adds a property with the given key, value and lifespan.
/// If there are 2 properties with the same key but different lifespans, the one with a shorter lifespan will be used.
/// \param key The key of the property to add. Can not be longer than 128 characters.
///
/// \param value The value of the property to add. Will be truncated if its longer than 1024 characters.
///
/// \param lifespan The lifespan of the property to add.
///
///
/// throws:
/// <code>MetadataError.limitReached</code> if the limit of properties was reached.
- (BOOL)addPropertyWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value lifespan:(enum MetadataLifespan)lifespan error:(NSError * _Nullable * _Nullable)error;
/// Updates the value of a resource for a given key and lifespan.
/// \param key The key of the resource to update.
///
/// \param value The value of the resource to update. Will be truncated if its longer than 1024 characters.
///
/// \param lifespan The lifespan of the resource to update.
///
- (BOOL)updateResourceWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value lifespan:(enum MetadataLifespan)lifespan error:(NSError * _Nullable * _Nullable)error;
/// Updates the value of a property for a given key and lifespan.
/// \param key The key of the property to update.
///
/// \param value The value of the property to update. Will be truncated if its longer than 1024 characters.
///
/// \param lifespan The lifespan of the property to update.
///
- (BOOL)updatePropertyWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value lifespan:(enum MetadataLifespan)lifespan error:(NSError * _Nullable * _Nullable)error;
/// Removes the resource for the given key and lifespan.
/// \param key The key of the resource to remove.
///
/// \param lifespan The lifespan of the resource to remove.
///
- (BOOL)removeResourceWithKey:(NSString * _Nonnull)key lifespan:(enum MetadataLifespan)lifespan error:(NSError * _Nullable * _Nullable)error;
/// Removes the property for the given key and lifespan.
/// \param key The key of the property to remove.
///
/// \param lifespan The lifespan of the property to remove.
///
- (BOOL)removePropertyWithKey:(NSString * _Nonnull)key lifespan:(enum MetadataLifespan)lifespan error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface EMBMetadataHandler (SWIFT_EXTENSION(EmbraceCore))
/// Adds a persona tag with the given value and lifespan.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     persona The value of the persona tag to add.
///   </li>
///   <li>
///     lifespan The lifespan of the persona tag to add.
///   </li>
/// </ul>
/// See <code>MetadataHandler.add(personas: [PersonaTag])</code> for more information on behavior
/// note:
/// This method is for Objective-C compatibility. In Swift, it is
/// recommended to use <code>PersonaTag</code> and define custom persona tags as static properties.
- (BOOL)addWithPersona:(NSString * _Nonnull)persona lifespan:(enum MetadataLifespan)lifespan error:(NSError * _Nullable * _Nullable)error;
/// Retrieve the current set of persona tags as strings.
/// note:
/// This method is for Objective-C compatibility. In Swift, it is
/// recommended to use the <code>currentPersonaTags</code> property.
- (NSArray<NSString *> * _Nonnull)getCurrentPersonas SWIFT_WARN_UNUSED_RESULT;
@end




@interface EMBMetadataHandler (SWIFT_EXTENSION(EmbraceCore))
/// Clear all user properties.
/// This will clear all user properties set via the <code>userName</code>, <code>userEmail</code> and <code>userIdentifier</code> properties.
- (void)clearUserProperties;
@end

typedef SWIFT_ENUM(NSInteger, MetadataLifespan, open) {
/// The resource will be removed when the session ends.
  MetadataLifespanSession = 0,
/// The resource will be removed when the process ends
  MetadataLifespanProcess = 1,
/// The resource will be removed when the app is uninstalled.
  MetadataLifespanPermanent = 2,
};



/// Class used to set custom Exporters when initializing the Embrace SDK.
SWIFT_CLASS_NAMED("OpenTelemetryExport")
@interface EMBOpenTelemetryExport : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Used to define the platform the current application is running on.
typedef SWIFT_ENUM_NAMED(NSInteger, EMBPlatform, "Platform", open) {
  EMBPlatformUnity = 0,
  EMBPlatformReactNative = 1,
  EMBPlatformFlutter = 2,
  EMBPlatformNative = 3,
};


@class EMBPushNotificationCaptureServiceOptions;

/// Service that generates OpenTelemetry span events when notifications are received through the <code>UNUserNotificationCenter</code>.
SWIFT_RESILIENT_CLASS("_TtC11EmbraceCore30PushNotificationCaptureService")
@interface PushNotificationCaptureService : EMBCaptureService
@property (nonatomic, readonly, strong) EMBPushNotificationCaptureServiceOptions * _Nonnull options;
- (nonnull instancetype)initWithOptions:(EMBPushNotificationCaptureServiceOptions * _Nonnull)options;
- (nonnull instancetype)init;
- (void)onInstall;
@end


@interface PushNotificationCaptureService (SWIFT_EXTENSION(EmbraceCore))
@end


/// Class used to setup a WebViewCaptureService.
SWIFT_CLASS_NAMED("Options")
@interface EMBPushNotificationCaptureServiceOptions : NSObject
/// Defines wether or not the Embrace SDK should capture the data from the push notifications
@property (nonatomic, readonly) BOOL captureData;
- (nonnull instancetype)initWithCaptureData:(BOOL)captureData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end


/// Class used to represent a Push Notification as a SpanEvent.
/// Usage example:
/// <code>Embrace.client?.add(.push(userInfo: apsDictionary))</code>
SWIFT_CLASS_NAMED("PushNotificationEvent")
@interface EMBPushNotificationEvent : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class EMBTapCaptureServiceOptions;

/// Service that generates OpenTelemetry span events for taps on the screen.
/// Note that any taps done on a keyboard view will be automatically ignored.
SWIFT_RESILIENT_CLASS_NAMED("TapCaptureService")
@interface EMBTapCaptureService : EMBCaptureService
- (nonnull instancetype)initWithOptions:(EMBTapCaptureServiceOptions * _Nonnull)options;
- (void)onInstall;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface EMBTapCaptureService (SWIFT_EXTENSION(EmbraceCore))
@end

@protocol EMBTapCaptureServiceDelegate;

/// Class used to setup a TapCaptureService.
SWIFT_CLASS_NAMED("Options")
@interface EMBTapCaptureServiceOptions : NSObject
/// Defines a list of UIView types to be ignored by this service. Any taps done on views of these types will not be recorded.
@property (nonatomic, readonly, copy) NSArray<Class> * _Nonnull ignoredViewTypes;
/// Defines wether the service should capture the coordinates of the taps.
@property (nonatomic, readonly) BOOL captureTapCoordinates;
/// Delegate used to decide if each indivudual tap should be recorded or not.
@property (nonatomic, readonly, strong) id <EMBTapCaptureServiceDelegate> _Nullable delegate;
- (nonnull instancetype)initWithIgnoredViewTypes:(NSArray<Class> * _Nonnull)ignoredViewTypes captureTapCoordinates:(BOOL)captureTapCoordinates delegate:(id <EMBTapCaptureServiceDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end

@class UIView;

/// Delegate used to control which taps are allowed to be captured by a <code>TapCaptureService</code>.
SWIFT_PROTOCOL_NAMED("TapCaptureServiceDelegate")
@protocol EMBTapCaptureServiceDelegate <NSObject>
- (BOOL)shouldCaptureTapOnView:(UIView * _Nonnull)onView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldCaptureTapCoordinatesOnView:(UIView * _Nonnull)onView SWIFT_WARN_UNUSED_RESULT;
@end


@class EMBURLSessionCaptureServiceOptions;

/// Service that generates OpenTelemetry spans for network requests that use <code>URLSession</code>.
SWIFT_RESILIENT_CLASS_NAMED("URLSessionCaptureService")
@interface EMBURLSessionCaptureService : EMBCaptureService
- (nonnull instancetype)initWithOptions:(EMBURLSessionCaptureServiceOptions * _Nonnull)options;
- (nonnull instancetype)init;
- (void)onInstall;
@end


@interface EMBURLSessionCaptureService (SWIFT_EXTENSION(EmbraceCore))
@end

@protocol URLSessionRequestsDataSource;

/// Class used to setup a URLSessionCaptureService.
SWIFT_CLASS_NAMED("Options")
@interface EMBURLSessionCaptureServiceOptions : NSObject
/// Defines wether or not the Embrace SDK should inject the <code>traceparent</code> header into all network requests
@property (nonatomic, readonly) BOOL injectTracingHeader;
/// <code>URLSessionRequestsDataSource</code> instance that will manipuate all network requests
/// before the Embrace SDK captures their data.
@property (nonatomic, readonly, strong) id <URLSessionRequestsDataSource> _Nullable requestsDataSource;
- (nonnull instancetype)initWithInjectTracingHeader:(BOOL)injectTracingHeader requestsDataSource:(id <URLSessionRequestsDataSource> _Nullable)requestsDataSource OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end

@class NSURLRequest;

/// This protocol can be used to modify requests before the Embrace SDK
/// captures their data into OTel spans.
/// Example:
/// This could be useful if you need to obfuscate certains parts of a request path
/// if it contains sensitive data.
SWIFT_PROTOCOL("_TtP11EmbraceCore28URLSessionRequestsDataSource_")
@protocol URLSessionRequestsDataSource <NSObject>
- (NSURLRequest * _Nonnull)modifiedRequestFor:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
@end



/// Service that generates OpenTelemtry spans for <code>UIViewControllers</code>.
/// The spans start on <code>viewDidAppear</code> and end on <code>viewDidDisappear</code>.
SWIFT_RESILIENT_CLASS_NAMED("ViewCaptureService")
@interface EMBViewCaptureService : EMBCaptureService
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)onInstall;
@end



@class EMBWebViewCaptureServiceOptions;

/// Service that generates OpenTelemetry span events when a <code>WKWebView</code> loads an URL or throws an error.
SWIFT_RESILIENT_CLASS_NAMED("WebViewCaptureService")
@interface EMBWebViewCaptureService : EMBCaptureService
@property (nonatomic, readonly, strong) EMBWebViewCaptureServiceOptions * _Nonnull options;
- (nonnull instancetype)initWithOptions:(EMBWebViewCaptureServiceOptions * _Nonnull)options;
- (nonnull instancetype)init;
- (void)onInstall;
@end


@interface EMBWebViewCaptureService (SWIFT_EXTENSION(EmbraceCore))
@end


/// Class used to setup a WebViewCaptureService.
SWIFT_CLASS_NAMED("Options")
@interface EMBWebViewCaptureServiceOptions : NSObject
/// Defines wether or not the Embrace SDK should remove the query params when capturing URLs from a web view.
@property (nonatomic, readonly) BOOL stripQueryParams;
- (nonnull instancetype)initWithStripQueryParams:(BOOL)stripQueryParams OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
